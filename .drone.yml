---
kind: pipeline
name: 1.0.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.0.0
        --file dockerfiles/1.0.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.0.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.0.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.1.0
        --file dockerfiles/1.1.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.1.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.1.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.1.1
        --file dockerfiles/1.1.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.1.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.1.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.1.2
        --file dockerfiles/1.1.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.1.2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.1.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.1.3
        --file dockerfiles/1.1.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.1.3
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.1.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.1.4
        --file dockerfiles/1.1.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.1.4
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.1.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.5

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.1.5
        --file dockerfiles/1.1.5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.1.5
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.1.5
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.1.6
        --file dockerfiles/1.1.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.1.6
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.1.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.7

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.1.7
        --file dockerfiles/1.1.7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.1.7
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.1.7
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.1.8
        --file dockerfiles/1.1.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.1.8
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.1.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.0
        --file dockerfiles/1.2.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.1
        --file dockerfiles/1.2.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.2
        --file dockerfiles/1.2.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.3
        --file dockerfiles/1.2.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.3
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.4
        --file dockerfiles/1.2.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.4
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.5

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.5
        --file dockerfiles/1.2.5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.5
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.5
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.6
        --file dockerfiles/1.2.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.6
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.7

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.7
        --file dockerfiles/1.2.7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.7
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.7
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.8
        --file dockerfiles/1.2.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.8
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.9

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.9
        --file dockerfiles/1.2.9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.9
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.9
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.10

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.10
        --file dockerfiles/1.2.10/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.10
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.10
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.11

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.11
        --file dockerfiles/1.2.11/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.11
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.11
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.12

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.12
        --file dockerfiles/1.2.12/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.12
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.12
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.13

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.13
        --file dockerfiles/1.2.13/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.13
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.13
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.14

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.14
        --file dockerfiles/1.2.14/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.14
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.14
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.15

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.15
        --file dockerfiles/1.2.15/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.15
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.15
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.16

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.16
        --file dockerfiles/1.2.16/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.16
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.16
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.17

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.17
        --file dockerfiles/1.2.17/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.17
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.17
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.18

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.18
        --file dockerfiles/1.2.18/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.18
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.18
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.2.19

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.2.19
        --file dockerfiles/1.2.19/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.2.19
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.2.19
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.0
        --file dockerfiles/1.3.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.1
        --file dockerfiles/1.3.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.2
        --file dockerfiles/1.3.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.3
        --file dockerfiles/1.3.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.3
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.4
        --file dockerfiles/1.3.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.4
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.5

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.5
        --file dockerfiles/1.3.5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.5
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.5
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.6
        --file dockerfiles/1.3.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.6
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.7

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.7
        --file dockerfiles/1.3.7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.7
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.7
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.8
        --file dockerfiles/1.3.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.8
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.9

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.9
        --file dockerfiles/1.3.9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.9
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.9
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.10

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.10
        --file dockerfiles/1.3.10/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.10
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.10
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.11

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.11
        --file dockerfiles/1.3.11/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.11
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.11
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.12

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.12
        --file dockerfiles/1.3.12/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.12
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.12
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.13

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.13
        --file dockerfiles/1.3.13/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.13
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.13
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.14

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.14
        --file dockerfiles/1.3.14/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.14
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.14
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.15

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.15
        --file dockerfiles/1.3.15/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.15
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.15
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.16

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.16
        --file dockerfiles/1.3.16/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.16
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.16
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.17

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.17
        --file dockerfiles/1.3.17/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.17
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.17
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.18

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.18
        --file dockerfiles/1.3.18/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.18
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.18
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.19

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.19
        --file dockerfiles/1.3.19/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.19
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.19
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.20

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.20
        --file dockerfiles/1.3.20/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.20
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.20
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.21

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.21
        --file dockerfiles/1.3.21/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.21
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.21
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.3.22

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:1.3.22
        --file dockerfiles/1.3.22/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:1.3.22
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:1.3.22
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.0.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.0.0
        --file dockerfiles/2.0.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.0.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.0.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.0
        --file dockerfiles/2.1.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.1
        --file dockerfiles/2.1.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.2
        --file dockerfiles/2.1.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.3
        --file dockerfiles/2.1.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.3
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.4
        --file dockerfiles/2.1.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.4
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.5

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.5
        --file dockerfiles/2.1.5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.5
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.5
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.6
        --file dockerfiles/2.1.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.6
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.7

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.7
        --file dockerfiles/2.1.7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.7
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.7
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.8
        --file dockerfiles/2.1.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.8
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.9

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.9
        --file dockerfiles/2.1.9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.9
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.9
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.10

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.10
        --file dockerfiles/2.1.10/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.10
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.10
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.11

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.11
        --file dockerfiles/2.1.11/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.11
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.11
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.12

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.12
        --file dockerfiles/2.1.12/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.12
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.12
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.13

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.13
        --file dockerfiles/2.1.13/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.13
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.13
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.14

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.14
        --file dockerfiles/2.1.14/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.14
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.14
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.15

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.15
        --file dockerfiles/2.1.15/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.15
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.15
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.16

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.16
        --file dockerfiles/2.1.16/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.16
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.16
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.17

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.17
        --file dockerfiles/2.1.17/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.17
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.17
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.1.18

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.1.18
        --file dockerfiles/2.1.18/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.1.18
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.1.18
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.2.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.2.0
        --file dockerfiles/2.2.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.2.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.2.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.2.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.2.1
        --file dockerfiles/2.2.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.2.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.2.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.3.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.3.0
        --file dockerfiles/2.3.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.3.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.3.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.4.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.4.0
        --file dockerfiles/2.4.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.4.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.4.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.4.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.4.1
        --file dockerfiles/2.4.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.4.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.4.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.4.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.4.2
        --file dockerfiles/2.4.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.4.2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.4.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.5.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.5.0
        --file dockerfiles/2.5.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.5.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.5.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.5.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.5.1
        --file dockerfiles/2.5.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.5.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.5.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.6.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.6.0
        --file dockerfiles/2.6.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.6.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.6.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.6.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.6.1
        --file dockerfiles/2.6.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.6.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.6.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.0
        --file dockerfiles/2.7.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.1
        --file dockerfiles/2.7.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.2
        --file dockerfiles/2.7.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.3
        --file dockerfiles/2.7.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.3
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.4
        --file dockerfiles/2.7.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.4
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.5

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.5
        --file dockerfiles/2.7.5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.5
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.5
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.6
        --file dockerfiles/2.7.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.6
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.7

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.7
        --file dockerfiles/2.7.7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.7
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.7
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.8
        --file dockerfiles/2.7.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.8
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.9

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.9
        --file dockerfiles/2.7.9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.9
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.9
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.10

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.10
        --file dockerfiles/2.7.10/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.10
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.10
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.11

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.11
        --file dockerfiles/2.7.11/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.11
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.11
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.7.12

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.7.12
        --file dockerfiles/2.7.12/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.7.12
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.7.12
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.8.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.8.0
        --file dockerfiles/2.8.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.8.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.8.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.9.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.9.0
        --file dockerfiles/2.9.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.9.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.9.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.10.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.10.0
        --file dockerfiles/2.10.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.10.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.10.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.11.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.11.0
        --file dockerfiles/2.11.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.11.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.11.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.12.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.12.0
        --file dockerfiles/2.12.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.12.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.12.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.13.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.13.0
        --file dockerfiles/2.13.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.13.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.13.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.13.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.13.1
        --file dockerfiles/2.13.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.13.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.13.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.14.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.14.0
        --file dockerfiles/2.14.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.14.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.14.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.14.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.14.1
        --file dockerfiles/2.14.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.14.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.14.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.15.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.15.0
        --file dockerfiles/2.15.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.15.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.15.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.15.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.15.1
        --file dockerfiles/2.15.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.15.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.15.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.16.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.16.0
        --file dockerfiles/2.16.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.16.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.16.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.16.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.16.1
        --file dockerfiles/2.16.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.16.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.16.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.16.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.16.2
        --file dockerfiles/2.16.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.16.2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.16.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.16.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.16.3
        --file dockerfiles/2.16.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.16.3
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.16.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.17.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.17.0
        --file dockerfiles/2.17.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.17.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.17.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.18.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.18.0
        --file dockerfiles/2.18.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.18.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.18.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.18.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.18.1
        --file dockerfiles/2.18.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.18.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.18.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.19.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.19.0
        --file dockerfiles/2.19.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.19.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.19.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.19.0d1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.19.0d1
        --file dockerfiles/2.19.0d1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.19.0d1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.19.0d1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.19.0d2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.19.0d2
        --file dockerfiles/2.19.0d2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.19.0d2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.19.0d2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.19.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.19.1
        --file dockerfiles/2.19.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.19.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.19.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.20.0d0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.20.0d0
        --file dockerfiles/2.20.0d0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.20.0d0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.20.0d0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 2.20.0d1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:2.20.0d1
        --file dockerfiles/2.20.0d1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:2.20.0d1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:2.20.0d1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 3.0.0p1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/mbedtls:3.0.0p1
        --file dockerfiles/3.0.0p1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/mbedtls:3.0.0p1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/mbedtls:3.0.0p1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

